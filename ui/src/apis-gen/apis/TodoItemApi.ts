/* tslint:disable */
/* eslint-disable */
/**
 * 轻舟 RestAPI
 * An ASP.NET Core Web API for managing ToDo items
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  QzResponseOfString,
  QzResponseOfTodoItemResponse,
  TodoDto,
} from '../models/index';
import {
    QzResponseOfStringFromJSON,
    QzResponseOfStringToJSON,
    QzResponseOfTodoItemResponseFromJSON,
    QzResponseOfTodoItemResponseToJSON,
    TodoDtoFromJSON,
    TodoDtoToJSON,
} from '../models/index';

export interface TodoItemDeleteRequest {
    id?: number;
}

export interface TodoItemGetRequest {
    id?: number;
}

export interface TodoItemPostRequest {
    todoDto: TodoDto;
}

export interface TodoItemPutRequest {
    todoDto: TodoDto;
}

/**
 * 
 */
export class TodoItemApi extends runtime.BaseAPI {

    /**
     */
    async todoItemDeleteRaw(requestParameters: TodoItemDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QzResponseOfString>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['Id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/TodoItem/Delete`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QzResponseOfStringFromJSON(jsonValue));
    }

    /**
     */
    async todoItemDelete(requestParameters: TodoItemDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QzResponseOfString> {
        const response = await this.todoItemDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async todoItemGetRaw(requestParameters: TodoItemGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QzResponseOfTodoItemResponse>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['Id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/TodoItem/Get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QzResponseOfTodoItemResponseFromJSON(jsonValue));
    }

    /**
     */
    async todoItemGet(requestParameters: TodoItemGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QzResponseOfTodoItemResponse> {
        const response = await this.todoItemGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async todoItemPostRaw(requestParameters: TodoItemPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QzResponseOfString>> {
        if (requestParameters['todoDto'] == null) {
            throw new runtime.RequiredError(
                'todoDto',
                'Required parameter "todoDto" was null or undefined when calling todoItemPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/TodoItem/Post`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TodoDtoToJSON(requestParameters['todoDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QzResponseOfStringFromJSON(jsonValue));
    }

    /**
     */
    async todoItemPost(requestParameters: TodoItemPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QzResponseOfString> {
        const response = await this.todoItemPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async todoItemPutRaw(requestParameters: TodoItemPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QzResponseOfString>> {
        if (requestParameters['todoDto'] == null) {
            throw new runtime.RequiredError(
                'todoDto',
                'Required parameter "todoDto" was null or undefined when calling todoItemPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/TodoItem/Put`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TodoDtoToJSON(requestParameters['todoDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QzResponseOfStringFromJSON(jsonValue));
    }

    /**
     */
    async todoItemPut(requestParameters: TodoItemPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QzResponseOfString> {
        const response = await this.todoItemPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
